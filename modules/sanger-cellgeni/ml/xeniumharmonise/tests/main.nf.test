
nextflow_process {

    name "Test Process ML_XENIUMHARMONISE"
    script "../main.nf"
    config "./nextflow.config"
    process "ML_XENIUMHARMONISE"

    tag "modules"
    tag "modules_sangercellgeni"
    tag "ml"
    tag "ml/xeniumharmonise"

    test("xeniumharmonise - dir") {

        
        when {
            process {
                """
                
                input[0] = [
                    'xeniumharmonise_test', // meta map
                    '/lustre/scratch127/cellgen/cellgeni/dn10/BK30-SKI-27-FO-3-S3/0043607 - BK30-SKI-27-FO-3-s3 - 2024-10-23 11.28.38.ndpi',
                    '/lustre/scratch127/cellgen/cellgeni/dn10/BK30-SKI-27-FO-3-S3/output-XETG00155__0043607__BK30-SKI-27-FO-3-S3__20241010__133127',
                    '/lustre/scratch127/cellgen/cellgeni/dn10/BK30-SKI-27-FO-3-S3/BK30-SKI-27-FO-3-S3_harmonised'
                ]
                """
            }
        }

        then {
            def harmonisedDir = process.out.harmonised_output?.getAt(0)?.getAt(1)
            assert harmonisedDir : "Expected harmonised directory output"

            // Define regex pattern: starts with a or d, followed by digits, ending in .tdb
            def pattern = ~/^[ad]\d+\.tdb$/

            // Collect matching files with full paths, sort them by path to ensure stable order
            def stableFiles = []
            file(harmonisedDir).eachFileRecurse { f ->
                if (f.name ==~ pattern) {
                    stableFiles << f
                }
            }
            stableFiles.sort { it.path }

            assertAll(
                { assert process.success },
                { assert snapshot(stableFiles, process.out.versions).match() }
                
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("xeniumharmonise - dir - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    'xeniumharmonise_test', // meta map
                    '/lustre/scratch127/cellgen/cellgeni/dn10/BK30-SKI-27-FO-3-S3/output-XETG00155__0043607__BK30-SKI-27-FO-3-S3__20241010__133127',
                    '/lustre/scratch127/cellgen/cellgeni/dn10/BK30-SKI-27-FO-3-S3/0043607 - BK30-SKI-27-FO-3-s3 - 2024-10-23 11.28.38.ndpi',
                    '/lustre/scratch127/cellgen/cellgeni/dn10/BK30-SKI-27-FO-3-S3/BK30-SKI-27-FO-3-S3_harmonised'
                ]
                """
            }
        }

        then {
            
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                
            )
        }

    }
}
