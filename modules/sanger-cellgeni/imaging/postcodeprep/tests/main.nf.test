// nf-core modules test imaging/postcodeprep
nextflow_process {

    name "Test Process IMAGING_POSTCODEPREP"
    script "../main.nf"
    process "IMAGING_POSTCODEPREP"

    tag "modules"
    tag "modules_sangercellgeni"
    tag "imaging"
    tag "imaging/postcodeprep"

    test("ISS - npy") {

        when {
            params.postcodeprep_args = "--coding_col_prefix Readouts* --codebook_targer_col gene "
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + '/ISS/decoding/merfish_transcript_profile.npy', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/ISS/decoding/codebook.csv', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/ISS/decoding/readouts.csv', checkIfExists: true),
                    6,
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("ISS - npy - stub") {

        options "-stub"

        when {
            params.postcodeprep_args = "--coding_col_prefix Readouts* --codebook_targer_col gene "
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + '/ISS/decoding/merfish_transcript_profile.npy', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/ISS/decoding/codebook.csv', checkIfExists: true),
                    file(params.modules_testdata_base_path + '/ISS/decoding/readouts.csv', checkIfExists: true),
                    6,
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
