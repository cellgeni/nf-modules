// nf-core modules test imaging/postcode
nextflow_process {

    name "Test Process IMAGING_POSTCODE"
    script "../main.nf"
    process "IMAGING_POSTCODE"

    tag "modules"
    tag "modules_sanger-cellgeni"
    tag "imaging"
    tag "imaging/postcode"

    test("merfish - npy - 1") {

        when {
            params.module_args = '--train_params {up_prc_to_remove:99.95}'
            process {
                """
                input[0] = [
                    [ id:'merfish_1'],
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_1_reformatted_profile.npy', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_1_starfish_codebook.json', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_1_barcodes_0123_str.txt', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/merfish_transcript_locations_1.csv', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("merfish - npy - 5000") {

        when {
            params.module_args = '--train_params {up_prc_to_remove:99.95}'
            process {
                """
                input[0] = [
                    [ id:'merfish_5000'],
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_5000_reformatted_profile.npy', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_5000_starfish_codebook.json', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_5000_barcodes_0123_str.txt', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/merfish_transcript_locations_5000.csv', checkIfExists: true),
                ] 
                """
            }
        }

        then {
            assertAll(
                // { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("merfish - npy - 100000") {

        when {
            params.module_args = '--train_params {up_prc_to_remove:99.95}'
            process {
                """
                input[0] = [
                    [ id:'merfish_100000'],
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_100000_reformatted_profile.npy', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_100000_starfish_codebook.json', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_100000_barcodes_0123_str.txt', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/merfish_transcript_locations_100000.csv', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("stub") {

        options "-stub"
        
        when {
            params.module_args = '--train_params {up_prc_to_remove:99.95}'
            process {
                """
                input[0] = [
                    [ id:'merfish_test'],
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_1_reformatted_profile.npy', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_1_starfish_codebook.json', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/for_decoding/merfish_1_barcodes_0123_str.txt', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'MERFISH/merfish_transcript_locations_1.csv', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
