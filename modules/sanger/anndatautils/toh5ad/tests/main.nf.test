nextflow_process {

    name "Test Process ANNDATAUTILS_TOH5AD"
    script "../main.nf"
    process "ANNDATAUTILS_TOH5AD"

    tag "modules"
    tag "modules_sanger"
    tag "anndatautils"
    tag "anndatautils/toh5ad"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("Converts .h5 file to .h5ad") {
        when {
            process {
                """
                input[0] = [
                    ['pbmc_1k_h5', file("./data/anndatautils/pbmc_1k.h5"],
                    ['pbmc_1k_mtx', file("./data/anndatautils/raw_feature_bc_matrix"]
                ]
                input[1] = ["___", "---"]
                """
            }
        }

        then {
            // basec run health
            assert process.success
            assert process.exitStatus == 0
            assert process.trace.succeeded().size() == 1

            // stdout and stderr hygiene
            assert process.stdout.any { it.contains('Saving AnnData object to .h5ad file') }
            assert process.stderr.isEmpty()

            // output files
            with(process.out.h5ad) {
                assert size() == 2
                each { f -> assert path(f).exists() } 
                
                def names = collect { path(it).name }
                assert names == [
                    'pbmc_1k_h5.h5ad',
                    'pbmc_1k_mtx.h5ad'
                ]
            }

            with(process.out.versions) {
                assert size() == 2
                each { f -> assert path(f).exists() } 
            }

        }
        
    }

}
