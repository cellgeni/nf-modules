// nf-test test main.nf.test in tests folder
nextflow_process {

    name "Test Process IMAGING_GENERATECOMPANION"
    script "../main.nf"
    process "IMAGING_GENERATECOMPANION"
    config "./nextflow.config"

    tag "modules"
    tag "modules_sanger"
    tag "imaging"
    tag "imaging/generatecompanion"

    test("generatecompanion - hcs") {

        when {
            params {
                module_args = "--master_file Index.xml"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + '/TL_STP/TL_STP_RVT-HFF-20220623__2022-06-24T13_50_10-Measurement 1/Images', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("generatecompanion - wsi") {

        when {
            params {
                module_args = "--master_file Index.idx.xml"
            }
            process {
                """
                input[0] = [
                    [ id:'test' ], // meta map
                    file(params.modules_testdata_base_path + '/QC/beadplatetest__2021-02-17T16_03_59-Measurement 1/Images', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("generatecompanion -  stub") {

        options "-stub"

        when {
            params {
                module_args = ""
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + '/TL_STP/TL_STP_RVT-HFF-20220623__2022-06-24T13_50_10-Measurement 1/Images', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
